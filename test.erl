-module(test).
-import(erlann, [trainPercNet/1, newPercNet/1, neuron/1, new/1, stop/1, 
    setWeight/2, setBias/2, get/2, call/2, heavySide/2, fermiDist/2, signal/2]).
-export([testOrPercNet/0, testAndPercNet/0]).

testMultiPercNet() ->
    Neurons = newPercNet(3).
testOrPercNet() ->
    Neurons = newPercNet(3),
    TrainingSet = [
        {[1, 1], 1},
        {[0, 1], 1},
        {[0, 0], 0},
        {[0, 0], 0},
        {[1, 0], 1},
        {[0, 1], 1},
        {[0, 0], 0},
        {[1, 0], 1},
        {[0, 1], 1},
        {[0, 0], 0},
        {[1, 1], 1},
        {[0, 1], 1},
        {[0, 0], 0},
        {[1, 0], 1},
        {[0, 1], 1},
        {[0, 0], 0},
        {[1, 1], 1},
        {[0, 1], 1},
        {[0, 0], 0},
        {[0, 0], 0},
        {[1, 0], 1},
        {[0, 1], 1},
        {[0, 0], 0},
        {[1, 0], 1},
        {[0, 1], 1},
        {[0, 0], 0},
        {[1, 1], 1},
        {[0, 1], 1},
        {[0, 0], 0},
        {[1, 0], 1},
        {[0, 1], 1},
        {[0, 0], 0}
    ],
    trainPercNet({TrainingSet, Neurons, linear, linear}),
    
    [Hn|Tn] = Neurons,
    call(Tn, {getWeight}),
    call([Hn], {getBias}),
    spawn_link(fun() -> signal(Tn, [1,1]) end),
    receive {signal, Y1} -> 
        io:fwrite("{1, 1}: ~p\n", [Y1])
    end,
    spawn_link(fun() -> signal(Tn, [1,0]) end),
    receive {signal, Y2} -> 
        io:fwrite("{1, 0}: ~p\n", [Y2])
    end,
    spawn_link(fun() -> signal(Tn, [0,1]) end),
    receive {signal, Y3} -> 
        io:fwrite("{0, 1}: ~p\n", [Y3])
    end,
    spawn_link(fun() -> signal(Tn, [0,0]) end),
    receive {signal, Y4} -> 
        io:fwrite("{0, 0}: ~p\n", [Y4])
    end.

testAndPercNet() ->
    Neurons = newPercNet(3),
    TrainingSet = [
    {[1, 1], 1},
    {[1, 0], 0},
    {[0, 1], 0},
    {[0, 0], 0},
    {[1, 0], 0},
    {[0, 1], 0},
    {[1, 1], 1},
    {[1, 0], 0},
    {[0, 1], 0},
    {[1, 1], 1},
    {[1, 1], 1},
    {[1, 1], 1},
    {[1, 1], 1},
    {[1, 0], 0},
    {[0, 1], 0},
    {[0, 0], 0},
    {[1, 0], 0},
    {[0, 1], 0},
    {[1, 1], 1},
    {[1, 0], 0},
    {[0, 1], 0},
    {[1, 1], 1},
    {[1, 1], 1},
    {[1, 1], 1},
    {[1, 1], 1},
    {[1, 0], 0},
    {[0, 1], 0},
    {[0, 0], 0},
    {[1, 0], 0},
    {[0, 1], 0},
    {[1, 1], 1},
    {[1, 0], 0},
    {[0, 1], 0},
    {[1, 1], 1},
    {[0, 0], 0},
    {[1, 0], 0},
    {[0, 1], 0},
    {[1, 1], 1},
    {[1, 0], 0},
    {[0, 1], 0},
    {[1, 1], 1},
    {[1, 1], 1},
    {[1, 1], 1},
    {[1, 1], 1},
    {[1, 1], 1},
    {[1, 1], 1},
    {[1, 0], 0},
    {[0, 1], 0},
    {[1, 1], 1},
    {[1, 0], 0},
    {[0, 1], 0},
    {[0, 0], 0},
    {[1, 0], 0},
    {[0, 1], 0},
    {[1, 1], 1},
    {[1, 0], 0},
    {[0, 1], 0},
    {[1, 1], 1},
    {[1, 1], 1},
    {[1, 1], 1},
    {[1, 1], 1},
    {[1, 0], 0},
    {[0, 1], 0},
    {[0, 0], 0},
    {[1, 0], 0},
    {[0, 1], 0},
    {[1, 1], 1},
    {[1, 0], 0},
    {[0, 1], 0},
    {[1, 1], 1},
    {[1, 1], 1},
    {[1, 1], 1},
    {[1, 1], 1},
    {[1, 0], 0},
    {[0, 1], 0},
    {[0, 0], 0},
    {[1, 0], 0},
    {[0, 1], 0},
    {[1, 1], 1},
    {[1, 0], 0},
    {[0, 1], 0},
    {[1, 1], 1},
    {[0, 0], 0},
    {[1, 0], 0},
    {[0, 1], 0},
    {[1, 1], 1},
    {[1, 0], 0},
    {[0, 1], 0},
    {[1, 1], 1},
    {[1, 1], 1},
    {[1, 1], 1},
    {[1, 1], 1},
    {[1, 1], 1},
    {[0, 0], 0},
    {[1, 0], 0},
    {[0, 1], 0},
    {[1, 1], 1},
    {[1, 0], 0},
    {[0, 1], 0},
    {[1, 1], 1},
    {[1, 1], 1},
    {[1, 1], 1},
    {[1, 1], 1},
    {[1, 1], 1},
    {[1, 1], 1},
    {[1, 0], 0},
    {[0, 1], 0},
    {[1, 1], 1},
    {[1, 0], 0},
    {[0, 1], 0},
    {[0, 0], 0},
    {[1, 0], 0},
    {[0, 1], 0},
    {[1, 1], 1},
    {[1, 0], 0},
    {[0, 1], 0},
    {[1, 1], 1},
    {[1, 1], 1},
    {[1, 1], 1},
    {[1, 1], 1},
    {[1, 0], 0},
    {[0, 1], 0},
    {[0, 0], 0},
    {[1, 0], 0},
    {[0, 1], 0},
    {[1, 1], 1},
    {[1, 0], 0},
    {[0, 1], 0},
    {[1, 1], 1},
    {[1, 1], 1},
    {[1, 1], 1},
    {[1, 1], 1},
    {[1, 0], 0},
    {[0, 1], 0},
    {[0, 0], 0},
    {[1, 0], 0},
    {[0, 1], 0},
    {[1, 1], 1},
    {[1, 0], 0},
    {[0, 1], 0},
    {[1, 1], 1},
    {[0, 0], 0},
    {[1, 0], 0},
    {[0, 1], 0},
    {[1, 1], 1},
    {[1, 0], 0},
    {[0, 1], 0},
    {[1, 1], 1},
    {[1, 1], 1},
    {[1, 1], 1},
    {[1, 1], 1},
    {[1, 1], 1},
    {[1, 0], 0},
    {[0, 1], 0},
    {[0, 0], 0},
    {[1, 0], 0},
    {[0, 1], 0},
    {[1, 1], 1},
    {[1, 0], 0},
    {[0, 1], 0},
    {[1, 1], 1},
    {[0, 0], 0},
    {[1, 0], 0},
    {[0, 1], 0},
    {[1, 1], 1},
    {[1, 0], 0},
    {[0, 1], 0},
    {[1, 1], 1},
    {[1, 1], 1},
    {[1, 1], 1},
    {[1, 1], 1},
    {[1, 1], 1},
    {[1, 1], 1},
    {[1, 0], 0},
    {[0, 1], 0},
    {[1, 1], 1},
    {[1, 0], 0},
    {[0, 1], 0},
    {[0, 0], 0},
    {[1, 0], 0},
    {[0, 1], 0},
    {[1, 1], 1},
    {[1, 0], 0},
    {[0, 1], 0},
    {[1, 1], 1},
    {[1, 1], 1},
    {[1, 1], 1},
    {[1, 1], 1},
    {[1, 0], 0},
    {[0, 1], 0},
    {[0, 0], 0},
    {[1, 0], 0},
    {[0, 1], 0},
    {[1, 1], 1},
    {[1, 0], 0},
    {[0, 1], 0},
    {[1, 1], 1},
    {[1, 1], 1},
    {[1, 1], 1},
    {[1, 1], 1},
    {[1, 0], 0},
    {[0, 1], 0},
    {[0, 0], 0},
    {[1, 0], 0},
    {[0, 1], 0},
    {[1, 1], 1},
    {[1, 0], 0},
    {[0, 1], 0},
    {[1, 1], 1},
    {[0, 0], 0},
    {[1, 0], 0},
    {[0, 1], 0},
    {[1, 1], 1},
    {[1, 0], 0},
    {[0, 1], 0},
    {[1, 1], 1},
    {[1, 1], 1},
    {[1, 1], 1},
    {[1, 1], 1},
    {[1, 1], 1},
    {[1, 1], 1},
    {[1, 0], 0},
    {[0, 1], 0},
    {[1, 1], 1},
    {[1, 1], 1},
    {[1, 0], 0},
    {[0, 1], 0},
    {[0, 0], 0},
    {[1, 0], 0},
    {[0, 1], 0},
    {[1, 1], 1},
    {[1, 0], 0},
    {[0, 1], 0},
    {[1, 1], 1},
    {[0, 0], 0},
    {[1, 1], 1},
    {[1, 1], 1},
    {[1, 0], 0},
    {[0, 1], 0},
    {[0, 0], 0},
    {[1, 0], 0},
    {[0, 1], 0},
    {[1, 1], 1},
    {[1, 0], 0},
    {[0, 1], 0},
    {[1, 1], 1},
    {[0, 0], 0}
    ],
    trainPercNet({TrainingSet, Neurons, linear, linear}),
    
    [Hn|Tn] = Neurons,
    call(Tn, {getWeight}),
    call([Hn], {getBias}),
    spawn_link(fun() -> signal(Tn, [1,1]) end),
    receive {signal, Y1} -> 
        io:fwrite("{1, 1}: ~p\n", [Y1])
    end,
    spawn_link(fun() -> signal(Tn, [1,0]) end),
    receive {signal, Y2} -> 
        io:fwrite("{1, 0}: ~p\n", [Y2])
    end,
    spawn_link(fun() -> signal(Tn, [0,1]) end),
    receive {signal, Y3} -> 
        io:fwrite("{0, 1}: ~p\n", [Y3])
    end,
    spawn_link(fun() -> signal(Tn, [0,0]) end),
    receive {signal, Y4} -> 
        io:fwrite("{0, 0}: ~p\n", [Y4])
    end.